package BibliographyLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Author;
  private ConceptPresentation props_AuthorsElement;
  private ConceptPresentation props_BiblioElement;
  private ConceptPresentation props_BiblioRecord;
  private ConceptPresentation props_Bibliography;
  private ConceptPresentation props_PublicationYearElement;
  private ConceptPresentation props_TitleElement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Author:
        if (props_Author == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Author");
          props_Author = cpb.create();
        }
        return props_Author;
      case LanguageConceptSwitch.AuthorsElement:
        if (props_AuthorsElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AuthorsElement");
          props_AuthorsElement = cpb.create();
        }
        return props_AuthorsElement;
      case LanguageConceptSwitch.BiblioElement:
        if (props_BiblioElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BiblioElement");
          props_BiblioElement = cpb.create();
        }
        return props_BiblioElement;
      case LanguageConceptSwitch.BiblioRecord:
        if (props_BiblioRecord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BiblioRecord = cpb.create();
        }
        return props_BiblioRecord;
      case LanguageConceptSwitch.Bibliography:
        if (props_Bibliography == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Bibliography = cpb.create();
        }
        return props_Bibliography;
      case LanguageConceptSwitch.PublicationYearElement:
        if (props_PublicationYearElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PublicationYearElement");
          props_PublicationYearElement = cpb.create();
        }
        return props_PublicationYearElement;
      case LanguageConceptSwitch.TitleElement:
        if (props_TitleElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TitleElement");
          props_TitleElement = cpb.create();
        }
        return props_TitleElement;
    }
    return null;
  }
}
